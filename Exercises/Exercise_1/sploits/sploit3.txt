In target 3 the user is expected to provide a string which includes the number of widgets structs they want to input and then, after the comma, the data for these widgets. When this count is used to compare whit the MAX_WIDGETS variable to see if we have provide few enough, it is compared as a signed integer. The, to copy our widgets, the count is multiplies by 20 (as this is the size of the widgets struct) and the resulting number is used to tell memcpy() how many bytes it should copy into the buffer. This gives the opportunity for us to exploit the program with a integer overflow to be able to go past the lenght check and use a buffer overflow bug to overwrite the return address stored 4 bytes after the end of the buffer, as in target 1.
I start by creating a character array with a lenght of 4819, 11 bytes for the number representing the cound and the comma, the rest of the 4808 bytes will be filled with NOP instructions, shellcode, and the last 4 bytes will be the address for the start of the buffer which will overwrite the return address and jump to the start of the buffer running NOP instructions and eventually the shellcode. 
For the number that will represent the count we need a number that is large enough that it will be negative when it is signed. I achive this by let the first bit be 1, and the last bit be bits which would be 241 if the fisrt bit wasn't there. This number turns out to be 2147483889. When this number gets parsed into a signed integer it will represent -2147483407, which is more than low enough to pass the length check in foo(). This is how it looks in bits: 10000000000000000000000011110001. We can see that the first 1 is followed by a lot of zeroes before the part representing 241. When this number is multiplied by 20 the most significant bit will overflow and we are basically left with 241 * 20 = 4820 which is high enough for us to be able to overflow the buffer. Then our character array is copied into the buffer overflowing the return address, runing the shellcode and giving me the root shell. 
